Epic: Integrate Dify AI API for Content Generation

Story 1: API Setup
- Task 1.1: Create apps/web/api/dify.ts file
- Task 1.2: Implement Dify AI API access functions
- Task 1.3: Add DIFY_API_KEY to .env.local file
- Task 1.4: Implement authentication with Bearer token

Story 2: Frontend Form Creation
- Task 2.1: Update Post2Thread component in apps/web/app/page.tsx
- Task 2.2: Add Language select field
- Task 2.3: Add Topic text input field
- Task 2.4: Add Writer Style select field
- Task 2.5: Add optional Persona text input field
- Task 2.6: Add Original Article textarea field

Story 3: API Integration
- Task 3.1: Implement POST /workflows/run endpoint call
- Task 3.2: Set up SSE for streaming response handling
- Task 3.3: Implement request body formation with form field values
- Task 3.4: Add user identifier to API requests

Story 4: Response Handling
- Task 4.1: Implement streaming chunk parsing
- Task 4.2: Create real-time UI updates for content generation
- Task 4.3: Implement error handling for API calls
- Task 4.4: Add user-friendly error messages

Story 5: Performance and Security
- Task 5.1: Implement loading state during API calls
- Task 5.2: Ensure API key is not exposed client-side
- Task 5.3: Implement input validation and sanitization

Story 6: UI/UX Enhancements
- Task 6.1: Create responsive design for the form
- Task 6.2: Implement real-time validation feedback
- Task 6.3: Add progress indicator for content generation
- Task 6.4: Create preview mode for generated content
- Task 6.5: Allow editing of generated content before posting

Story 7: Language and Writer Style Options
- Task 7.1: Add language options (English, 繁體中文 台灣, Japanese)
- Task 7.2: Add writer style options (business writer, personal feeling, personal opinion, for thread)

Story 8: API Usage Restrictions
- Task 8.1: Implement rate limiting (10 requests per minute per user)
- Task 8.2: Set maximum token limit (1000 tokens per request)
- Task 8.3: Implement daily usage quota (10,000 tokens per user)
- Task 8.4: Add error handling for API limits
- Task 8.5: Implement caching mechanism for similar requests

Story 9: Testing and Quality Assurance
- Task 9.1: Write unit tests for API functions
- Task 9.2: Write integration tests for form submission and API interaction
- Task 9.3: Perform cross-browser testing
- Task 9.4: Conduct user acceptance testing

Story 10: Documentation and Deployment
- Task 10.1: Update README with new feature details
- Task 10.2: Document API usage and restrictions
- Task 10.3: Prepare deployment instructions
- Task 10.4: Create user guide for content generation feature

Story 11: Monitoring and Analytics
- Task 11.1: Implement logging for API calls and errors
- Task 11.2: Set up monitoring for API usage and limits
- Task 11.3: Create dashboard for usage statistics

Story 12: Optimization and Refinement
- Task 12.1: Analyze and optimize API call performance
- Task 12.2: Refine UI based on user feedback
- Task 12.3: Implement any necessary accessibility improvements

Note: Each task should be assigned story points, priority, and estimated time for completion during sprint planning.